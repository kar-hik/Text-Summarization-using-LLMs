from flask import Flask, render_template, request, jsonify
from PyPDF2 import PdfReader
from langchain.chains.question_answering import load_qa_chain
from langchain.text_splitter import CharacterTextSplitter
from langchain_community.llms import Cohere
import cohere

app = Flask(__name__)

# Flag to keep track of whether review is submitted or not
review_submitted = False

def generate_summary(full_text, api_key):
    co = cohere.Client(api_key)
    response = co.summarize(
        text=full_text,
        length='medium',
        format='paragraph',
        model='summarize-xlarge',
        temperature=0.3,
    )
    return response.summary



@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        if 'pdf' not in request.files:
            return jsonify({'error': 'No file part'})

        pdf_file = request.files['pdf']
        if pdf_file.filename == '':
            return jsonify({'error': 'No selected file'})

        text = ""
        pdf_reader = PdfReader(pdf_file)
        for page in pdf_reader.pages:
            page_text = page.extract_text()
            text += page_text.encode('utf-8', 'ignore').decode('utf-8')

        text_splitter = CharacterTextSplitter(
            separator="\n",
            chunk_size=1000,
            chunk_overlap=200,
            length_function=len
        )
        chunks = text_splitter.split_text(text)

        api_key = "otknHihD8DeVE0xx1y9kecxTOk6MBF77OPCf12cb"

        # Combine chunks and generate a summary
        full_text = " ".join(chunks)
        try:
            summary = generate_summary(full_text, api_key)
        except Exception as e:
            print(f"Error generating summary: {str(e)}")
            return jsonify({'error': 'Error generating summary'})

        # Simple evaluation heuristic (optional)
        if len(summary.split()) < 50 or len(summary.split()) > 300:
            evaluation_result = "Summary length is not optimal."
        else:
            evaluation_result = "Summary length is appropriate."

        return jsonify({'summary': summary, 'evaluation': evaluation_result})

    return render_template('index.html')


@app.route('/ask', methods=['POST'])
def ask():
    data = request.json
    question = data.get('question')

    if not question:
        return jsonify({'error': 'No question provided'})

    llm = Cohere(cohere_api_key="otknHihD8DeVE0xx1y9kecxTOk6MBF77OPCf12cb", temperature=0.5)
    chain = load_qa_chain(llm, chain_type="stuff")

    try:
        response = chain.run(input_documents=[], question=question)  # No knowledge base used here
    except Exception as e:
        print(f"Error answering question: {str(e)}")
        return jsonify({'error': 'Error answering question'})

    return jsonify({'answer': response})


if __name__ == '__main__':
    app.run(debug=True)

index file

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PDF Summarizer and QA</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

    <style>
        input:focus, button:focus {
            outline: none;
            box-shadow: none;
        }
        .hidden {
            display: none;
        }
    </style>
</head>
<body class="bg-gray-100 text-gray-900">
    <div class="container mx-auto p-4">
        <h1 class="text-3xl font-bold mb-4 text-center">PDF Summarizer and QA</h1>
        <form id="upload-form" class="mb-4 p-4 bg-white rounded-lg shadow-md" enctype="multipart/form-data">
            <div class="mb-4">
                <label class="block text-sm font-medium text-gray-700">Upload PDF:</label>
                <input type="file" name="pdf" accept="application/pdf" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm bg-gray-200 text-gray-800">
            </div>
            <button type="button" id="upload-button" onclick="uploadPdf()" class="w-full py-2 px-4 bg-gray-700 text-gray-200 rounded-md shadow-sm hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500">
                <span id="upload-button-text">Upload PDF</span>
                <i id="upload-spinner" class="fas fa-spinner fa-spin hidden ml-2"></i>
            </button>
        </form>
        <div class="bg-white rounded-lg shadow-md p-4 mb-4">
            <h2 class="text-2xl font-semibold mb-2">Summary</h2>
            <p id="summary" class="text-gray-800"></p>
        </div>
<div id="feedback-section" class="bg-white rounded-lg shadow-md p-4 mb-4">
    <h2 class="text-2xl font-semibold mb-2">Feedback</h2>
    <div id="star-rating" class="flex items-center mb-2">
        <i class="far fa-star text-gray-400 cursor-pointer" onclick="toggleStar(1)"></i>
        <i class="far fa-star text-gray-400 cursor-pointer" onclick="toggleStar(2)"></i>
        <i class="far fa-star text-gray-400 cursor-pointer" onclick="toggleStar(3)"></i>
        <i class="far fa-star text-gray-400 cursor-pointer" onclick="toggleStar(4)"></i>
        <i class="far fa-star text-gray-400 cursor-pointer" onclick="toggleStar(5)"></i>
    </div>
<textarea id="feedback-comment" class="w-full h-24 border border-blue-300 rounded-md shadow-sm focus:outline-none focus:border-indigo-500 sm:text-sm bg-gray-200 text-gray-800"></textarea>
    <button id="submit-feedback" onclick="submitFeedback()" class="mt-2 py-2 px-4 bg-gray-700 text-gray-200 rounded-md shadow-sm hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500">
        Submit Feedback
    </button>
</div>
        <div class="bg-white rounded-lg shadow-md p-4 mb-4">
            <h2 class="text-2xl font-semibold mb-2">Ask a Question</h2>
            <div class="flex">
                <input type="text" id="question" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm bg-gray-200 text-gray-800" placeholder="Enter your question">
                <button type="button" id="ask-button" onclick="askQuestion()" class="ml-2 py-2 px-4 bg-gray-700 text-gray-200 rounded-md shadow-sm hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500">
                    <span id="ask-button-text"><i class="fas fa-arrow-right"></i></span>
                    <i id="ask-spinner" class="fas fa-spinner fa-spin hidden ml-2"></i>
                </button>
            </div>
        </div>
        <div class="bg-white rounded-lg shadow-md p-4 mb-4">
            <h2 class="text-2xl font-semibold mb-2">Answer</h2>
            <p id="answer" class="text-gray-800"></p>
        </div>
    </div>

    <script>
        let knowledgeBase;

        function uploadPdf() {
            const form = document.getElementById('upload-form');
            const formData = new FormData(form);
            const uploadButton = document.getElementById('upload-button');
            const uploadSpinner = document.getElementById('upload-spinner');
            const uploadButtonText = document.getElementById('upload-button-text');

            uploadButton.disabled = true;
            uploadSpinner.classList.remove('hidden');
            uploadButtonText.textContent = 'Uploading...';

            console.log('Uploading PDF...'); // Debugging line

            fetch('/', {
                method: 'POST',
                body: formData
            }).then(response => {
                console.log('PDF uploaded'); // Debugging line
                return response.json();
            })
            .then(data => {
                console.log('Response received:', data); // Debugging line

                uploadButton.disabled = false;

                uploadSpinner.classList.add('hidden');
                uploadButtonText.textContent = 'Upload PDF';

                if (data.error) {
                    alert(data.error);
                } else {
                    document.getElementById('summary').textContent = data.summary;
                    document.getElementById('evaluation').textContent = data.evaluation;
                    knowledgeBase = data.knowledge_base;
                }
            }).catch(error => {
                console.error('Error:', error); // Debugging line

                uploadButton.disabled = false;
                uploadSpinner.classList.add('hidden');
                uploadButtonText.textContent = 'Upload PDF';
            });
        }

        function askQuestion() {
            const question = document.getElementById('question').value;
            const askButton = document.getElementById('ask-button');
            const askSpinner = document.getElementById('ask-spinner');
            const askButtonText = document.getElementById('ask-button-text');

            askButton.disabled = true;
            askSpinner.classList.remove('hidden');
            askButtonText.classList.add('hidden');

            console.log('Asking question...'); // Debugging line

            fetch('/ask', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    question: question,
                    knowledge_base: knowledgeBase
                })
            }).then(response => {
                console.log('Question asked'); // Debugging line
                return response.json();
            })
            .then(data => {
                console.log('Response received:', data); // Debugging line

                askButton.disabled = false;
                askSpinner.classList.add('hidden');
                askButtonText.classList.remove('hidden');

                if (data.error) {
                    alert(data.error);
                } else {
                    document.getElementById('answer').textContent = data.answer;
                }
            }).catch(error => {
                console.error('Error:', error); // Debugging line

                askButton.disabled = false;
                askSpinner.classList.add('hidden');
                askButtonText.classList.remove('hidden');
            });
        }

let selectedStars = 0;

function toggleStar(starNumber) {
    const starRating = document.querySelectorAll('#star-rating i');

    // Reset all stars to gray
    starRating.forEach((star, index) => {
        if (index < starNumber) {
            star.classList.remove('text-gray-400');
            star.classList.add('text-yellow-500');
        } else {
            star.classList.remove('text-yellow-500');
            star.classList.add('text-gray-400');
        }
    });

    // Update selectedStars
    selectedStars = starNumber;
}

function submitFeedback() {
    const commentTextarea = document.getElementById('feedback-comment');
    const submitButton = document.getElementById('submit-feedback');

    // Disable comment textarea and submit button
    commentTextarea.disabled = true;
    submitButton.disabled = true;

    // Change button text to "Submitted"
    submitButton.textContent = "Submitted";

    // Remove black border
    const feedbackSection = document.getElementById('feedback-section');
    feedbackSection.classList.remove('border', 'border-black');

    // Alert the user
    alert('Thank you for the feedback! Rating: ' + selectedStars);
}

    </script>
</body>
</html>